{"version":3,"file":"index.js","sources":["../src/components/ProductItem.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, StyleSheet, Button } from 'react-native';\nimport { Product } from 'shared-utils';\n\nexport interface ProductItemProps {\n  product: Product; // Always pass the product object\n  quantity?: number; // Optional: Quantity (only for cart items)\n  onSelect: (id: string) => void; // Callback for adding to the cart\n  onQuantityChange?: (id: string, quantity: number) => void; // Callback for changing quantity\n  standalone?: boolean; // If true, use controlled mode for quantity\n}\n\nexport const ProductItem: React.FC<ProductItemProps> = ({\n  product,\n  quantity,\n  onSelect,\n  onQuantityChange,\n  standalone = false,\n}) => {\n\n  const [localQuantity, setLocalQuantity] = useState<number>(quantity || 0);\n\n  const handleQuantityChange = (newQuantity: number) => {\n    if (standalone) {\n      setLocalQuantity(newQuantity); // Update local state\n    } else {\n      if (onQuantityChange) {\n        onQuantityChange(product.id, newQuantity); // Use callback\n      }\n    }\n  };\n\n  const handleAddToCart = () => {\n    if (standalone) {\n      setLocalQuantity((prev) => prev + 1);\n    } else {\n      if (onSelect) {\n        onSelect(product.id);\n      }\n    }\n  };\n\n  const displayQuantity = standalone ? localQuantity : quantity;\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.name}>{product.name}</Text>\n      <Text style={styles.price}>${product.price.toFixed(2)}</Text>\n      {quantity !== undefined ? (\n        <View style={styles.cartActions}>\n          <Button title=\"-\" onPress={() => handleQuantityChange(Math.max(displayQuantity! - 1, 0))} />\n          <Text style={styles.quantity}>{displayQuantity}</Text>\n          <Button title=\"+\" onPress={() => handleQuantityChange(displayQuantity! + 1)} />\n        </View>\n      ) : (\n        <Button title=\"Add to Cart\" onPress={() => handleAddToCart()} />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { padding: 10, borderBottomWidth: 1, borderColor: '#ddd' },\n  name: { fontSize: 16, fontWeight: 'bold' },\n  price: { fontSize: 14, color: '#888' },\n  cartActions: { flexDirection: 'row', alignItems: 'center' },\n  quantity: { marginHorizontal: 10, fontSize: 16 },\n});"],"names":["styles","StyleSheet","create","container","padding","borderBottomWidth","borderColor","name","fontSize","fontWeight","price","color","cartActions","flexDirection","alignItems","quantity","marginHorizontal","_a","product","onSelect","onQuantityChange","_b","standalone","_c","useState","localQuantity","setLocalQuantity","handleQuantityChange","newQuantity","id","displayQuantity","_jsxs","jsxs","View","style","children","_jsx","Text","toFixed","undefined","Button","title","onPress","Math","max","jsx","prev"],"mappings":"6FA6DMA,EAASC,EAAUA,WAACC,OAAO,CAC/BC,UAAW,CAAEC,QAAS,GAAIC,kBAAmB,EAAGC,YAAa,QAC7DC,KAAM,CAAEC,SAAU,GAAIC,WAAY,QAClCC,MAAO,CAAEF,SAAU,GAAIG,MAAO,QAC9BC,YAAa,CAAEC,cAAe,MAAOC,WAAY,UACjDC,SAAU,CAAEC,iBAAkB,GAAIR,SAAU,0BAtDS,SAACS,GACtD,IAAAC,YACAH,EAAQE,EAAAF,SACRI,EAAQF,EAAAE,SACRC,EAAgBH,EAAAG,iBAChBC,EAAkBJ,EAAAK,WAAlBA,OAAU,IAAAD,GAAQA,EAGZE,EAAoCC,EAAAA,SAAiBT,GAAY,GAAhEU,EAAaF,EAAA,GAAEG,OAEhBC,EAAuB,SAACC,GACxBN,EACFI,EAAiBE,GAEbR,GACFA,EAAiBF,EAAQW,GAAID,EAGlC,EAYKE,EAAkBR,EAAaG,EAAgBV,EAErD,OACEgB,EAAAC,KAACC,OAAI,CAACC,MAAOlC,EAAOG,UAClBgC,SAAA,CAAAC,MAACC,EAAAA,KAAI,CAACH,MAAOlC,EAAOO,KAAO4B,SAAAjB,EAAQX,OACnCwB,EAAAA,KAACM,EAAIA,KAAA,CAACH,MAAOlC,EAAOU,oBAASQ,EAAQR,MAAM4B,QAAQ,WACrCC,IAAbxB,EACCgB,EAAAA,KAACE,EAAAA,KAAI,CAACC,MAAOlC,EAAOY,YAAWuB,SAAA,CAC7BC,EAAAA,IAACI,EAAMA,OAAA,CAACC,MAAM,IAAIC,QAAS,WAAM,OAAAf,EAAqBgB,KAAKC,IAAId,EAAmB,EAAG,GAAG,IACxFM,EAAAA,IAACC,EAAAA,KAAI,CAACH,MAAOlC,EAAOe,SAAQoB,SAAGL,IAC/BM,EAAAA,IAACI,EAAMA,QAACC,MAAM,IAAIC,QAAS,WAAM,OAAAf,EAAqBG,EAAmB,SAG3EM,EAACS,IAAAL,EAAMA,OAAC,CAAAC,MAAM,cAAcC,QAAS,WAtBrCpB,EACFI,GAAiB,SAACoB,GAAS,OAAAA,EAAO,CAAC,IAE/B3B,GACFA,EAASD,EAAQW,GAkB2C,MAIpE"}