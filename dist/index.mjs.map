{"version":3,"file":"index.mjs","sources":["../src/components/ProductItem.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, StyleSheet, Button } from 'react-native';\nimport { Product } from 'shared-utils';\n\nexport interface ProductItemProps {\n  product: Product; // Always pass the product object\n  quantity?: number; // Optional: Quantity (only for cart items)\n  onSelect: (id: string) => void; // Callback for adding to the cart\n  onQuantityChange?: (id: string, quantity: number) => void; // Callback for changing quantity\n  standalone?: boolean; // If true, use controlled mode for quantity\n}\n\nexport const ProductItem: React.FC<ProductItemProps> = ({\n  product,\n  quantity,\n  onSelect,\n  onQuantityChange,\n  standalone = false,\n}) => {\n\n  const [localQuantity, setLocalQuantity] = useState<number>(quantity || 0);\n\n  const handleQuantityChange = (newQuantity: number) => {\n    if (standalone) {\n      setLocalQuantity(newQuantity); // Update local state\n    } else {\n      if (onQuantityChange) {\n        onQuantityChange(product.id, newQuantity); // Use callback\n      }\n    }\n  };\n\n  const handleAddToCart = () => {\n    if (standalone) {\n      setLocalQuantity((prev) => prev + 1);\n    } else {\n      if (onSelect) {\n        onSelect(product.id);\n      }\n    }\n  };\n\n  const displayQuantity = standalone ? localQuantity : quantity;\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.name}>{product.name}</Text>\n      <Text style={styles.price}>${product.price.toFixed(2)}</Text>\n      {quantity !== undefined ? (\n        <View style={styles.cartActions}>\n          <Button title=\"-\" onPress={() => handleQuantityChange(Math.max(displayQuantity! - 1, 0))} />\n          <Text style={styles.quantity}>{displayQuantity}</Text>\n          <Button title=\"+\" onPress={() => handleQuantityChange(displayQuantity! + 1)} />\n        </View>\n      ) : (\n        <Button title=\"Add to Cart\" onPress={() => handleAddToCart()} />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { padding: 10, borderBottomWidth: 1, borderColor: '#ddd' },\n  name: { fontSize: 16, fontWeight: 'bold' },\n  price: { fontSize: 14, color: '#888' },\n  cartActions: { flexDirection: 'row', alignItems: 'center' },\n  quantity: { marginHorizontal: 10, fontSize: 16 },\n});"],"names":["ProductItem","_a","product","quantity","onSelect","onQuantityChange","_b","standalone","_c","useState","localQuantity","setLocalQuantity","handleQuantityChange","newQuantity","id","displayQuantity","_jsxs","View","style","styles","container","children","_jsx","Text","name","price","toFixed","undefined","cartActions","Button","title","onPress","Math","max","prev","StyleSheet","create","padding","borderBottomWidth","borderColor","fontSize","fontWeight","color","flexDirection","alignItems","marginHorizontal"],"mappings":"6JAYO,IAAMA,EAA0C,SAACC,GACtD,IAAAC,YACAC,EAAQF,EAAAE,SACRC,EAAQH,EAAAG,SACRC,EAAgBJ,EAAAI,iBAChBC,EAAkBL,EAAAM,WAAlBA,OAAU,IAAAD,GAAQA,EAGZE,EAAoCC,EAAiBN,GAAY,GAAhEO,EAAaF,EAAA,GAAEG,OAEhBC,EAAuB,SAACC,GACxBN,EACFI,EAAiBE,GAEbR,GACFA,EAAiBH,EAAQY,GAAID,EAGlC,EAYKE,EAAkBR,EAAaG,EAAgBP,EAErD,OACEa,EAACC,EAAI,CAACC,MAAOC,EAAOC,UAClBC,SAAA,CAAAC,EAACC,EAAI,CAACL,MAAOC,EAAOK,KAAOH,SAAAnB,EAAQsB,OACnCR,EAACO,EAAI,CAACL,MAAOC,EAAOM,oBAASvB,EAAQuB,MAAMC,QAAQ,WACrCC,IAAbxB,EACCa,EAACC,EAAI,CAACC,MAAOC,EAAOS,YAAWP,SAAA,CAC7BC,EAACO,EAAM,CAACC,MAAM,IAAIC,QAAS,WAAM,OAAAnB,EAAqBoB,KAAKC,IAAIlB,EAAmB,EAAG,GAAG,IACxFO,EAACC,EAAI,CAACL,MAAOC,EAAOhB,SAAQkB,SAAGN,IAC/BO,EAACO,GAAOC,MAAM,IAAIC,QAAS,WAAM,OAAAnB,EAAqBG,EAAmB,SAG3EO,EAACO,EAAO,CAAAC,MAAM,cAAcC,QAAS,WAtBrCxB,EACFI,GAAiB,SAACuB,GAAS,OAAAA,EAAO,CAAC,IAE/B9B,GACFA,EAASF,EAAQY,GAkB2C,MAIpE,EAEMK,EAASgB,EAAWC,OAAO,CAC/BhB,UAAW,CAAEiB,QAAS,GAAIC,kBAAmB,EAAGC,YAAa,QAC7Df,KAAM,CAAEgB,SAAU,GAAIC,WAAY,QAClChB,MAAO,CAAEe,SAAU,GAAIE,MAAO,QAC9Bd,YAAa,CAAEe,cAAe,MAAOC,WAAY,UACjDzC,SAAU,CAAE0C,iBAAkB,GAAIL,SAAU"}